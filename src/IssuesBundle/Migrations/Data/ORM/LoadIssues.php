<?php

namespace IssuesBundle\Migrations\Data\ORM;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\DataFixtures\AbstractFixture;
use Doctrine\Common\DataFixtures\DependentFixtureInterface;
use Doctrine\Common\Persistence\ObjectManager;
use IssuesBundle\Entity\Issue;

class LoadIssues extends AbstractFixture implements DependentFixtureInterface
{
    public function load(ObjectManager $manager)
    {
        $issue = new Issue();

        $user = $manager->getRepository('Oro\Bundle\UserBundle\Entity\User')->findOneBy(['username' => 'admin']);

        $manager->persist($user);
        
        if (!$user) {
            throw new \DomainException('Admin user not found, ensure that fixtures from UserBundle'
                .' are executed first.');
        }

        $organization = $user->getOrganization();

        $issue->setOrganization($organization);
        $issue->setOwner($user);

        $issue->setSummary('Example Issue');
        $issue->setCode('TEST1');
        $issue->setDescription('This is an example, autogenerated, issue.');
        $issue->setType(Issue::TYPE_STORY);
        $issue->setPriority($this->getReference('priority_10'));
        $issue->setReporter($user);
        $issue->setAssignee($user);
        $issue->setCreatedAt(new \DateTime('now'));
        $issue->setUpdatedAt(new \DateTime('now'));

        foreach ($this->createSubTasks($manager) as $subtask) {
            $issue->addChild($subtask);

            $manager->persist($subtask);
        }

        $manager->persist($issue);

        $manager->flush();
    }

    /**
     * @param ObjectManager $manager
     * @return ArrayCollection
     */
    private function createSubTasks(ObjectManager $manager)
    {
        $subtasks = new ArrayCollection();

        $user = $manager->getRepository('Oro\Bundle\UserBundle\Entity\User')->findOneBy(['username' => 'admin']);

        if (!$user) {
            throw new \DomainException('Admin user not found, ensure that fixtures from UserBundle'
                .' are executed first.');
        }

        $organization = $user->getOrganization();

        for ($i=0;$i<5;$i++) {
            $n = $i + 1;

            $issue = new Issue();
            $issue->setOrganization($organization);
            $issue->setOwner($user);

            $issue->setSummary('Example subtask #'.$n);
            $issue->setCode('TEST sub'.$n);
            $issue->setDescription('This is an example, autogenerated, issue.');
            $issue->setType(Issue::TYPE_SUBTASK);
            $issue->setPriority($this->getReference('priority_10'));
            $issue->setReporter($user);
            $issue->setAssignee($user);
            $issue->setCreatedAt(new \DateTime('now'));
            $issue->setUpdatedAt(new \DateTime('now'));

            $manager->persist($issue);

            $subtasks->add($issue);
        }

        return $subtasks;
    }

    /**
     * @return array
     */
    public function getDependencies()
    {
        return [
            'IssuesBundle\Migrations\Data\ORM\LoadPriorities',
            'IssuesBundle\Migrations\Data\ORM\LoadResolutions',
//            'Oro\Bundle\UserBundle\Migrations\Data\ORM\LoadAdminUserData' // I need an existing user account, but with
                                                                            // this dependency, when installing in test environment
                                                                            // I got
                                                                            // SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry 'IS_AUTHENTICATED_ANONYMOUSLY' for key 'UNIQ_673F65E757698A6A'
        ];
    }
}
