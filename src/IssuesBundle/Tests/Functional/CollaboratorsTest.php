<?php

namespace IssuesBundle\Test\Functional;

use IssuesBundle\Entity\Issue;
use IssuesBundle\Model\Service\IssueTypesDefinition;
use Oro\Bundle\TestFrameworkBundle\Test\WebTestCase;
use Oro\Bundle\UserBundle\Entity\User;

/**
 * @outputBuffering enabled
 * @dbIsolation
 * @dbReindex
 */
class CollaboratorsTest extends WebTestCase
{
    protected function setUp()
    {
        $this->initClient([], $this->generateBasicAuthHeader());

        $this->loadFixtures([
            'IssuesBundle\\Tests\\Functional\\DataFixtures\\LoadUserData',
        ]);
    }

    public function testFillsCollaboratorsWithAssigneeAndReporter()
    {
        $issue = $this->createIssue($this->getReference('issues_test_user_1'));

        $user2 = $this->getReference('issues_test_user_2');

        $issue->setAssignee($user2);

        $em = $this->getContainer()->get('doctrine.orm.default_entity_manager');

        $this->getContainer()->get('issues.model.collaboration')->updateCollaborators($issue);

        $em->persist($issue);
        $em->flush();

        $this->assertTrue($issue->getCollaborators()->contains($user2));

        // adding third user:

        $user3 = $this->getReference('issues_test_user_3');

        $reloadedIssue = $em->getRepository('IssuesBundle:Issue')->find($issue->getId());

        $reloadedIssue->setAssignee($user3);

        $this->getContainer()->get('issues.model.collaboration')->updateCollaborators($issue);
        
        $em->persist($reloadedIssue);
        $em->flush();

        $reloadedIssue2 = $em->getRepository('IssuesBundle:Issue')->find($issue->getId());

        $this->assertTrue($reloadedIssue2->getCollaborators()->contains($user3));
        $this->assertTrue($reloadedIssue2->getCollaborators()->count() == 3);
    }

    private function createIssue(User $user)
    {
        $organization = $user->getOrganization();

        $issue = new Issue();

        $issue->setOrganization($organization);

        $issue->setSummary('Example Issue for functional test about collaborators');
        $issue->setCode('TEST444');
        $issue->setDescription('This is an example, autogenerated, issue.');
        $issue->setType(IssueTypesDefinition::TYPE_TASK);
        $issue->setReporter($user);
        $issue->setAssignee($user);
        $issue->setCreatedAt(new \DateTime('now'));
        $issue->setUpdatedAt(new \DateTime('now'));

        return $issue;
    }
}
